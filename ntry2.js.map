{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./ent.js","webpack:///./md/example_1.md","webpack:///./pics/butt_audio.png","webpack:///./pics/start_record_btn.png","webpack:///./pics/drilldown.png"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","html","document","getElementById","innerHTML"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,kDClFrD,IAAIC,EAAO,EAAQ,GACHC,SAASC,eAAe,aAE9BC,UAAYH,G,gBCHtBjC,EAAOD,QAAU,m1BAA81B,EAAQ,GAA4B,6hBAAuiB,EAAQ,GAAkC,60EAA61E,EAAQ,GAA2B,63E,gBCAp2HC,EAAOD,QAAU,IAA0B,wC,gBCA3CC,EAAOD,QAAU,IAA0B,wC,gBCA3CC,EAAOD,QAAU,IAA0B","file":"ntry2.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","var html = require(\"./md/example_1.md\");\nvar container = document.getElementById(\"container\");\n\ncontainer.innerHTML = html;\n","module.exports = \"<h4 id=\\\"learn-coding---audio-recorder-in-javascript\\\">Learn Coding - audio recorder in javascript</h4>\\n<p>Learn javascript code required to run a recorder / audio player.\\nUse a powerful code editing and code run environment in your browser.\\nMake a short audio recording and play it back while you browse/ learn\\nthe short simple code that runs the media session.</p>\\n<h4 id=\\\"run-the-code\\\">Run the code</h4>\\n<p>You can use the <a href=\\\"https://jsfiddle.net/rowntreerob/nchu17x6/\\\">editor on JSFiddle</a> to inspect / run the code.</p>\\n<h4 id=\\\"instructions\\\">Instructions:</h4>\\n<p> Use the start button to make a short recording. Stop recording\\nwith the stop button. Click the Play control for playback of your audio.\\nFind the buttons/controls in the lower right-hand quadrant of the JSFiddle screen.</p>\\n<p>Lower right - run view:\\n<img src=\\\"\" + require(\"../pics/butt_audio.png\") + \"#thumb\\\" alt=\\\"run window\\\"></p>\\n<h4 id=\\\"line-by-line-learn-code\\\">Line by line, learn code</h4>\\n<p>Lines #1 , 2 define HTML while the script tag in #3 thru #41 is a block of Javascript code. HTML puts 2 things on the user interface: a button and the playback controls. Recorder\\nstart , recorder stop\\nare controlled by a button with a text label that is revised according to the status of\\nthe recorder ( is paused, is started).\\nFind more info on html5 tags (button, audio ) <a href=\\\"https://www.w3schools.com/tags/\\\">here</a>\\n<img src=\\\"\" + require(\"../pics/start_record_btn.png\") + \"\\\" alt=\\\"code window\\\">\\nLine #3 to the end is javascript code inserted within the html using a &quot;script&quot; tag.</p>\\n<h4 id=\\\"controlling-the-recorder\\\">controlling the recorder</h4>\\n<ul>\\n<li>an HTML button controls start and stop actions on the voice Recorder</li>\\n<li>a separate variable holds a boolean value indicating whether the button has already been clicked ie that the recorder was started already</li>\\n<li>Look for the javascript variables <strong>&quot;b&quot; &quot;clicked&quot;</strong> in Lines #4, 5, 9 30. The start button is represented by the variable <code>b</code>. the boolean variable is <code>clicked</code> . Note that the label on the button changes from &quot;start&quot; to &quot;stop&quot; in parallel with the value of &#39;clicked&#39;<h4 id=\\\"first-click\\\">first click</h4>\\n</li>\\n<li><strong>clicked</strong> variable #5 gets initial value of false. The record button has not been clicked when the code starts off and the first time its clicked, the code reaches #10 with <strong>clicked</strong> still at &quot;false&quot;.</li>\\n<li>The first of 2 &quot;if&quot; conditions #10,  allows lines from 11 to 31 to be invoked on the first time the start button is clicked.</li>\\n<li>lines 20 - 28 use regular behavior of the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\\\">MediaRecorder class</a> to define how to handle raw data from the microphone and how start/ stop the recorder.</li>\\n<li>more explain on MediaRecorder <a href=\\\"https://www.twilio.com/blog/mediastream-recording-api\\\">here</a><h4 id=\\\"2nd-click-stops-recorder\\\">2nd click stops recorder</h4>\\n</li>\\n<li>see lines 29, 30 which change the button&#39;s label to &quot;stop record&quot; and set <strong>clicked</strong> variable to true. This true value shows that the recorder &quot;is running&quot; so that the next button click will stop the recorder.</li>\\n<li>with <strong>clicked</strong> equal to true, look at #10 which uses the &quot;!&quot; syntax checking for a &quot;not true&quot;. The ! operator reverses the logical (true or false) state of the value so the following can occur: the 2nd time that the button is clicked  # 10\\nis asking &quot;if not true&quot;. Not-true  evaluates to false because <strong>clicked</strong> is true. The &quot;false &quot;  portion of the if statement runs at #37 and the recorder is stopped.\\n<img src=\\\"\" + require(\"../pics/drilldown.png\") + \"\\\" alt=\\\"code window\\\"><h4 id=\\\"details-on-audio-data\\\">details on audio data</h4>\\n</li>\\n<li>lines 15 - 17 supply details on how the audio is stored in computer binary codes. more info on &quot;channel-count, sample-size, sample-rate&quot; <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Audio_concepts#Audio_data_format_and_structure\\\">here</a><h4 id=\\\"accessing-recorded-media-in-the-browser\\\">accessing recorded media in the browser</h4>\\n</li>\\n<li>raw microphone data delivered by the computer-system to this app is bundled in a <strong>buffer</strong>. At a rate of a 15 a second, an arriving buffer with its data just gets added to a javascript array. See <strong>chunks</strong> variable at line 22.</li>\\n<li>when the recording is stopped, all of the array-data is converted to a form of audio media that is playable by the player controls from line 2. The <code>blob</code> at line 25 is a file-like object on which a URL reference can be created and the value of the URL passed to the player.</li>\\n<li>line 26 passes the URL, setting an attribute called &quot;src&quot; that belongs to the control. Now the player is configured to playback the audio file created using data from the mic.<br>Review  <a href=\\\"https://www.dummies.com/web-design-development/javascript/jsfiddle-and-javascript/\\\">how-to on JSFiddle</a> to inspect / run the code.  </li>\\n</ul>\\n<p>Whenever you commit to this repository, GitHub Pages will run <a href=\\\"https://jekyllrb.com/\\\">Jekyll</a> to rebuild the pages in your site, from the content in your Markdown files.</p>\\n<pre><code class=\\\"language-markdown\\\"><span class=\\\"hljs\\\">Syntax highlighted code block\\n\\n<span class=\\\"hljs-section\\\"># Header 1</span>\\n<span class=\\\"hljs-section\\\">## Header 2</span>\\n<span class=\\\"hljs-section\\\">### Header 3</span>\\n<span class=\\\"hljs-bullet\\\">\\n- </span>Bulleted\\n<span class=\\\"hljs-bullet\\\">- </span>List\\n<span class=\\\"hljs-bullet\\\">\\n1. </span>Numbered\\n<span class=\\\"hljs-bullet\\\">2. </span>List\\n\\n<span class=\\\"hljs-strong\\\">**Bold**</span> and <span class=\\\"hljs-emphasis\\\">_Italic_</span> and <span class=\\\"hljs-code\\\">`Code`</span> text\\n\\n[<span class=\\\"hljs-string\\\">Link</span>](<span class=\\\"hljs-link\\\">url</span>) and ![<span class=\\\"hljs-string\\\">Image</span>](<span class=\\\"hljs-link\\\">src</span>)</span></code></pre>\\n<p>For more details see <a href=\\\"https://guides.github.com/features/mastering-markdown/\\\">GitHub Flavored Markdown</a>.</p>\\n\";","module.exports = __webpack_public_path__ + \"30e6ea90870fffb0671c81f0ef6aabbc.png\";","module.exports = __webpack_public_path__ + \"e8e4da3ba36785d58237ac49a2c22a77.png\";","module.exports = __webpack_public_path__ + \"48093763eba1de5517d7e67103ea03e4.png\";"],"sourceRoot":""}